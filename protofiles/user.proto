syntax = "proto3";
package proto;

import "base.proto";
import "auth.proto";
import "google/protobuf/timestamp.proto";

message Friend {
    string  id         = 1;
    string  friend_id  = 2;
    string  user_id    = 3;
    bool    accepted   = 4;
    google.protobuf.Timestamp  created_at  = 5;
    google.protobuf.Timestamp  updated_at  = 6;
}

enum PERSONAL_STATE {
    OFFLINE    = 0;
    ONLINE     = 1;
    IDLE       = 2;
    BUSY       = 3;
    INVISIBLE  = 4;
}

message Activity {
    string  id          = 1;
    string  activity    = 2;
}

message User {
    string           id                    = 1;
    string           fullname              = 2;
    string           username              = 3;
    string           hash                  = 4;
    string           email                 = 5;
    string           password              = 6;
    bool             is_active             = 7;
    bool             email_verified        = 8;
    bool             is_staff              = 9;
    bool             verified              = 10;
    string           avatar                = 11;
    Activity         activity              = 12;
    PERSONAL_STATE   state                 = 13;
    google.protobuf.Timestamp  last_login  = 14;
    google.protobuf.Timestamp  joined_at   = 15;
    google.protobuf.Timestamp  updated_at  = 16;
}

enum NOTIFICATION_TYPE {
    INVALID            = 0;
    NEW_FRIEND         = 1;
    NEW_THEATER_INVITE = 2;
    SYSTEM_NOTIFY      = 3;
}

message Notification {
    string                     id            = 1;
    NOTIFICATION_TYPE          type          = 2;
    string                     data          = 4;
    bool                       read          = 5;
    string                     from_user_id  = 6;
    User                       from_user     = 7;
    string                     to_user_id    = 8;
    User                       to_user       = 9;
    google.protobuf.Timestamp  read_at       = 10;
    google.protobuf.Timestamp  created_at    = 11;
    google.protobuf.Timestamp  updated_at    = 12;
}

message RollbackStatesRequest {
    repeated string users_ids = 1;
}

message UpdateStateRequest {
    PERSONAL_STATE state = 1;
    AuthenticateRequest auth_request = 2;
}

message UpdateActivityRequest {
    Activity  activity  = 1;
    AuthenticateRequest auth_request = 2;
}

message FriendRequest {
    string  request_id  = 1;
    string  friend_id   = 2;
    AuthenticateRequest auth_request = 3;
}

message CreateUserRequest {
    User user = 1;
}

message GetFriendRequest {
    User user = 1;
}

message GetUserResponse {
    int64    code        = 1;
    string   status      = 2;
    string   message     = 3;
    User result = 4;
}

message FriendsResponse {
    int64    code    = 1;
    string   status  = 2;
    string   message = 3;
    repeated User result = 4;
}

message FriendResponse {
    int64         code    = 1;
    string        status  = 2;
    string        message = 3;
    User result  = 4;
}

message CreateNotificationRequest {
    Notification notification = 1;
    AuthenticateRequest   auth_request = 2;
}

message NotificationResponse {
    int64         code          = 1;
    string        status        = 2;
    string        message       = 3;
    int64         unread_count  = 4;
    repeated      Notification result  = 5;
}

message SearchUserRequest {
    string keyword = 1;
    AuthenticateRequest auth_request = 2;
}

message SearchUserResponse {
    int64         code    = 1;
    string        status  = 2;
    string        message = 3;
    repeated User result  = 4;
}

message UpdateUserRequest {
    AuthenticateRequest auth_request = 1;
    User       result       = 2;
}

service UserService {

    // Websocket requests only
    rpc RollbackStates(RollbackStatesRequest) returns (Response);

    // User Profile
    rpc UpdateState(UpdateStateRequest) returns (Response);
    rpc UpdateActivity(UpdateActivityRequest) returns (Response);
    rpc RemoveActivity(AuthenticateRequest) returns (Response);
    rpc GetUser(AuthenticateRequest) returns (GetUserResponse);
    rpc UpdateUser(UpdateUserRequest) returns (GetUserResponse);
    rpc Search(SearchUserRequest) returns (SearchUserResponse);
    rpc CreateUser(CreateUserRequest) returns (AuthResponse);

    // FriendZone
    rpc GetFriend(FriendRequest) returns (FriendResponse);
    rpc GetFriendRequest(FriendRequest) returns (Friend);
    rpc SendFriendRequest(FriendRequest) returns (Response);
    rpc AcceptFriendRequest(FriendRequest) returns (Response);
    rpc GetFriends(AuthenticateRequest) returns (FriendsResponse);

    // Notifications
    rpc GetNotifications(AuthenticateRequest) returns (NotificationResponse);
    rpc CreateNotification(CreateNotificationRequest) returns (NotificationResponse);
    rpc ReadAllNotifications(AuthenticateRequest) returns (NotificationResponse);

}