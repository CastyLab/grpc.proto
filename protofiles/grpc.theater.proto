syntax = "proto3";
package proto;

option go_package = ".;proto";

import "grpc.base.proto";
import "grpc.user.proto";
import "google/protobuf/timestamp.proto";

enum PRIVACY {
    PRIVATE  = 0;
    EVERYONE = 1;
    PUBLIC   = 2;
}

message Subtitle {
    string  id          = 1;
    string  theater_id  = 2;
    string  lang        = 3;
    string  file        = 4;
    google.protobuf.Timestamp  created_at  = 5;
    google.protobuf.Timestamp  updated_at  = 6;
}

message MediaSource {
    enum Type {
        UNKNOWN       = 0;
        YOUTUBE       = 1;
        TORRENT       = 2;
        SOUND_CLOUD   = 3;
        DOWNLOAD_URI  = 4;
        LOCAL_PATH    = 5;
    }
    message File {
        string   id       = 1;
        uint64   length   = 2;
        uint64   size     = 3;
        string   title    = 4;
    }
    string    id                  = 1;
    Type      type                = 2;
    string    banner              = 3;
    string    uri                 = 4;
    int64     last_played_time    = 5;
    repeated  Subtitle subtitles  = 6;
    string    user_id             = 7;
    google.protobuf.Timestamp  created_at  = 8;
    google.protobuf.Timestamp  updated_at  = 9;
}

message Theater {
    string        id                      = 1;
    string        title                   = 2;
    PRIVACY       privacy                 = 4;
    PRIVACY       video_player_access     = 5;
    string        user_id                 = 6;
    User          user                    = 7;
    MediaSource   media_source            = 8;
    google.protobuf.Timestamp created_at  = 9;
    google.protobuf.Timestamp updated_at  = 10;
}

message TheaterAuthRequest {
    Theater theater = 1;
    AuthenticateRequest auth_request = 2;
}

message RemoveSubtitleRequest {
    AuthenticateRequest auth_request = 1;
    Subtitle subtitle = 2;
    bytes file = 3;
}

message TheaterSubtitlesResponse {
    int64    code    = 1;
    string   status  = 2;
    string   message = 3;
    repeated Subtitle result = 4;
}

message UserTheaterResponse {
    int64    code    = 1;
    string   status  = 2;
    string   message = 3;
    Theater result = 4;
}

message InviteFriendsTheaterRequest {
    AuthenticateRequest auth_request = 1;
    string theater_id = 2;
    repeated string friend_ids = 3;
}

// Start of MediaSource requests and responses
message MediaSourceAuthRequest {
    AuthenticateRequest auth_request = 1;
    uint64   limit     = 2;
    uint64   page      = 3;
    uint64   per_page  = 4;
}

message MediaSourceRemoveRequest {
    AuthenticateRequest auth_request = 1;
    string   media_source_id         = 2;
}

message TheaterMediaSourcesResponse {
    int64    code    = 1;
    string   status  = 2;
    string   message = 3;
    repeated MediaSource result = 4;
}
// End of MediaSource requests and responses

service TheaterService {
    rpc Invite(InviteFriendsTheaterRequest) returns (Response);
    rpc GetTheater(Theater) returns (UserTheaterResponse);
    rpc UpdateTheater(TheaterAuthRequest) returns (Response);
    rpc GetSubtitles(TheaterAuthRequest) returns (TheaterSubtitlesResponse);
    rpc GetMediaSources(MediaSourceAuthRequest) returns (TheaterMediaSourcesResponse);
    rpc RemoveMediaSource(MediaSourceRemoveRequest) returns (Response);
    rpc RemoveSubtitle(RemoveSubtitleRequest) returns (Response);
}